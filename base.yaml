# Format as Python typing

# Load data, Processing and Normalization Parameters
data_norm:
  data_fil: "" # str Path to data dictionary
  data_train_subjs: ["train"] # List[str] Data elements for training
  data_val_subjs: ["val"] # List[str] Data elements for validation
  data_test_subjs: ["test"] # List[str] Data elements for testing
  data_normalization: original-measurement # str

# Output Directory and Project Name
output:
  out_base: "" # str Outputs saved directory, set to "" to not save results file
  proj_name: tst # str Output proj_name/run_name
  run_name: def # str Output proj_name/run_name

# JOFSTO network structure
network:
  num_units_score: [] # List[int] Intermediate units in Score Network S, [-1] to switch off
  num_units_task: [] # Intermediate units in Task Network T, set to [-1] to switch off
  score_activation: doublesigmoid # str Activation function for score \sigma in paper

# JOFSTO-Specific Training and Evaluation
jofsto_train_eval:
  C_i_values: [] # List[int] Values of C_1, C_2,...
  C_i_eval: [] # List[int] Evaluate at this C
  epochs: 10000 # int E in paper
  epochs_fix_sigma: 25 # int Fix score after epoch, E_1 in paper
  epochs_decay_sigma: 10 # int Progressively set score to be sample independent across number epochs, E_2 - E_1 in paper
  epochs_decay: 10 # int Progressively modify mask across number epochs, E_3 - E_2 in paper

train_pytorch:
  dataloader_params:
    batch_size: 1500 # int
    num_workers: 0 # int Dataloader number of workers
  optimizer_params:
    lr: 0.0001 # float

other_options:
  random_seed_value: 0 # int
  no_gpu: False # bool Turn off GPU and run on CPU
  save_output: False # bool Saves prediction on test data - may fill up disk space
  random_seed_value: 0 # int
